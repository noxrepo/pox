# Copyright 2012 James McCauley
#
# This file is part of POX.
#
# POX is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# POX is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with POX.  If not, see <http://www.gnu.org/licenses/>.


from pox.core import core
import pox.openflow.libopenflow_01 as of

log = core.getLogger()



class QoS (object):
  """
  A module that implements simple QoS by installing flow using VLAN PCP to Queue mapping 
  """
  def __init__ (self, connection):
    # Keep track of the connection to the switch so that we can
    # send it messages!
    self.connection = connection

    # This binds our PacketIn event listener
    connection.addListeners(self)

    # Use this table to keep track of which ethernet address is on
    # which switch port (keys are MACs, values are ports).
    self.mac_to_port = {}


  def _handle_PacketIn (self, event):
    """
    Handles packet in messages from the switch.
    """

    packet = event.parsed # This is the parsed packet data.
    if not packet.parsed:
      log.warning("Ignoring incomplete packet")
      return

    packet_in = event.ofp # The actual ofp_packet_in message.
    msg = of.ofp_flow_mod()
    msg.match = of.ofp_match.from_packet(packet, event.port)
    msg.idle_timeout = 0
    msg.hard_timeout = 0
    msg.data = packet_in

    for pcp in range(0,8) :
       if msg.match.in_port == 1 and msg.match.dl_vlan_pcp == pcp:
          args = {'port' : 2, 'queue_id': pcp + 1}
       elif msg.match.in_port == 2 and msg.match.dl_vlan_pcp == pcp:
          args = {'port' : 1, 'queue_id': pcp + 1}
    # Add an action to send to the specified port and queue
    print args
    action = of.ofp_action_enqueue(**args)
    msg.actions.append(action)

    # Send message to switch
    self.connection.send(msg)


def launch ():
  """
  Starts the component
  """
  def start_switch (event):
    log.debug("Controlling %s" % (event.connection,))
    QoS(event.connection)
  core.openflow.addListenerByName("ConnectionUp", start_switch)
